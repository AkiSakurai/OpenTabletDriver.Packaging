#!/bin/bash
if [ -f base ]; then
    source base
elif [ -f ../base ]; then
    source ../base
fi

# Build arguments
framework="net5"
runtime="linux-x64"
projects=("OpenTabletDriver.Daemon" "OpenTabletDriver.Console" "OpenTabletDriver.UX.Gtk")

# Other repositories
udevRepo=("https://github.com/InfinityGhost/OpenTabletDriver-udev" $(readlink -f "$src/OpenTabletDriver-udev"))

# Work directories
activeRoot="$root/Linux"
packageRoot="$activeRoot/OpenTabletDriver"

# Build directory
buildDir="$packageRoot"

# Platform requirements
udevrules="$packageRoot/99-opentabletdriver.rules"
pixmaps="$packageRoot/usr/share/pixmaps/"

# Output
archive="$activeRoot/OpenTabletDriver.$runtime.tar.gz"

clean() {
    if [ -f "$archive" ]; then
        echo -e "${accent}Cleaning up existing builds...${default}"
        rm -vf "$archive"
    fi

    if [ -d "$buildDir" ]; then
        echo -e "${accent}Cleaning up build directory...${default}"
        rm -vrf "$buildDir"
    fi

    if [ -e "$udevrules" ]; then
        echo -e "${accent}Cleaning existing udev rules...${default}"
        rm -v $udevrules
    fi

    echo -e "${accent}Cleaning up existing assets...${default}"
    rm -vrf "$pixmaps"
}

prepare() {
    clone_repo ${otdRepo[@]}
    clone_repo ${udevRepo[@]}
}

build() {
    echo -e "${accent}Building OpenTabletDriver...${default}"
    for proj in ${projects[@]}; do
        dotnet publish "$repoRoot/$proj/$proj.csproj" --runtime $runtime --configuration Release --self-contained false --framework $framework -o $buildDir
    done

    echo -e "${accent}Building udev rules...${default}"
    dotnet run -f $framework -p "${udevRepo[1]}/OpenTabletDriver.udev/OpenTabletDriver.udev.csproj" -- -v "$configurations" "$udevrules"

    echo -e "${accent}Copying all tablet configuration files to '$buildDir/Configurations'${default}"
    cp -vr "$configurations" "$buildDir"

    echo -e "${accent}Copying assets to '$buildDir/Assets'${default}"
    cp -vr "$repoRoot/OpenTabletDriver.UX/Assets" "$pixmaps"

    echo -e "${accent}Removing all debug files... (.pdb)${default}"
    find "$buildDir" -name "*.pdb" -type f -exec rm {} ';'

    echo -e "${accent}Creating '$archive'${default}"
    tar -zcvf "$archive" "OpenTabletDriver"

    echo -e "${accent}Packaging complete.${default}"
}

case $1 in
    "clean") clean ;;
    "prepare") prepare ;;
    "build") build ;;
    *)
        clean
        prepare
        build
    ;;
esac
